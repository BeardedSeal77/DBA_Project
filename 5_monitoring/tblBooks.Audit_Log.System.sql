


------------------------------------------------------------------
------------------WIP---------------------------------------------




-- First, create the audit_log table if it doesn't exist
DECLARE
  table_exists NUMBER;
BEGIN
  SELECT COUNT(*) INTO table_exists 
  FROM user_tables 
  WHERE table_name = 'AUDIT_LOG';
  
  IF table_exists = 0 THEN
    EXECUTE IMMEDIATE '
    CREATE TABLE audit_log (
        log_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        username       VARCHAR2(30),
        action         VARCHAR2(10),    --INSERT, UPDATE, DELETE
        table_name     VARCHAR2(30),
        action_time    TIMESTAMP DEFAULT SYSTIMESTAMP,
        record_id      VARCHAR2(100),   -- store primary key or identifier here
        old_record     CLOB             -- store deleted/old record as string
    )';
    DBMS_OUTPUT.PUT_LINE('AUDIT_LOG table created successfully.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('AUDIT_LOG table already exists. Skipping creation.');
  END IF;
END;
/

DROP TRIGGER trg_audit_tblBook



CREATE OR REPLACE TRIGGER trg_audit_tblBook
AFTER INSERT OR UPDATE OR DELETE ON tblBook
FOR EACH ROW
DECLARE
    v_username   VARCHAR2(30);
    v_action     VARCHAR2(10);
    v_record_id  VARCHAR2(100);
    v_old_record CLOB;
BEGIN
    SELECT USER INTO v_username FROM dual;

    IF INSERTING THEN
        v_action := 'INSERT';
        v_record_id := TO_CHAR(:NEW.BookID);
        v_old_record := NULL;

    ELSIF UPDATING OR DELETING THEN
        v_action := CASE WHEN UPDATING THEN 'UPDATE' ELSE 'DELETE' END;
        v_record_id := TO_CHAR(:OLD.BookID);

        v_old_record := 'BookID=' || TO_CHAR(:OLD.BookID) || ', ' ||
                        'BookTitle=' || :OLD.BookTitle || ', ' ||
                        'BookPublisher=' || NVL(:OLD.BookPublisher, 'NULL') || ', ' ||
                        'BookPublicationDate=' || NVL(TO_CHAR(:OLD.BookPublicationDate, 'YYYY-MM-DD'), 'NULL') || ', ' ||
                        'BookPrice=' || NVL(TO_CHAR(:OLD.BookPrice), 'NULL') || ', ' ||
                        'BookQuantity=' || NVL(TO_CHAR(:OLD.BookQuantity), 'NULL');
    END IF;

    INSERT INTO audit_log (username, action, table_name, record_id, old_record)
    VALUES (v_username, v_action, 'tblBook', v_record_id, v_old_record);
END;
/

